import{ae as p,M as g,af as m,a4 as l}from"./index.295caa00.js";const n=p(g.error,500);function L(e){const t=e.data;return(e==null?void 0:e.config.responseType)==="blob"?Promise.resolve(t):t.code==200&&t.success===!0?Promise.resolve(t.data):(console.error("http request error: ",e),Promise.reject(t))}function S(e){function t(o){o.response.data.code==10||o.response.data.code==11||(o.response.data.code==21?n("token \u6821\u9A8C\u9519\u8BEF"):o.response.data.code==40100||o.response.data.code==40200?n("\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF"):o.response.data.code==40400?n("\u9A8C\u8BC1\u7801\u9519\u8BEF"):o.response.data.code==40300?n(o.response.data.message||"\u4EC5\u5141\u8BB8\u6CA1\u6709\u7ED1\u5B9A\u5176\u4ED6\u65B9\u5F0F\u7684\u8D26\u53F7\u4F7F\u7528"):o.response.data.code==40198?n("\u7528\u6237\u767B\u5F55\u9891\u7E41\uFF0C\u8BF7\u4E00\u5206\u949F\u540E\u91CD\u8BD5"):o.response.data.code==40199?n("\u5BC6\u7801\u9519\u8BEF\u6B21\u6570\u8D85\u9650\uFF0C\u8BF7\u4E00\u5206\u949F\u540E\u91CD\u8BD5"):o.response.data.code==40210?n("\u5BC6\u7801\u5DF2\u5931\u6548\uFF0C\u8BF7\u8054\u7CFB\u7BA1\u7406\u5458\u5904\u7406"):o.response.data.code==40220&&n("\u624B\u673A\u53F7\u9519\u8BEF")),localStorage.removeItem("token")}switch(e.response&&e.response.data&&(e.response.data.message||e.response.data.msg),e.response&&e.response.status){case 401:t(e);break}return console.error("\u8BF7\u6C42\u72B6\u6001\u975E 200",e),Promise.reject(e)}function f(e){return e}function T(e){return Promise.reject(e)}const b="http://112.124.21.126:3000",r=m.create({baseURL:b,timeout:5*60*1e3,headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"}});r.interceptors.request.use(f,T);r.interceptors.response.use(L,S);function F(e,t,o,s={}){return r.get(e,{params:t,...s})}function y(e,t,o,s={}){return r.post(e,o,{headers:{"Content-Type":"application/json;charset=UTF-8"},params:t,...s})}class h{static async getTodoList(t={}){return await F("/todo/list",{})}static async getTodoTree(){const t=await this.getTodoList(),o=async a=>(await this.getSubTodoList(a.id)).map(async u=>({...u,subTodoList:await o(u)}));return t.map(async a=>({...a,subTodoList:await o(a)}))}static async getTodoSubTodoIdList(t){if(!JSON.parse(localStorage.getItem("todoList")||"[]").find(u=>u.id===t))throw new Error("Todo not found");const a=[],c=async u=>{(await this.getSubTodoList(u)).forEach(i=>{i.status==="todo"&&a.push(i.id),c(i.id)})};return await c(t),a}static async getTodoNode(t){const s=JSON.parse(localStorage.getItem("todoList")||"[]").find(u=>u.id===t);if(!s)throw new Error("Todo not found");const a=async u=>{const i=(await this.getSubTodoList(u)).map(d=>({...d,subTodoList:[]}));for(let d=0;d<i.length;d++)i[d].subTodoList=await a(i[d].id);return i},c=await a(s.id);return{...s,subTodoList:c}}static async getSubTodoList(t){return JSON.parse(localStorage.getItem("todoList")||"[]").filter(s=>s.parentId===t)}static async addTodo(t){return await y("/todo/create",{},t)}static async addSubTodo(t,o){const s=JSON.parse(localStorage.getItem("todoList")||"[]"),a={id:Math.random().toString(36).substring(7),parentId:t,status:"todo",createdAt:l().format("YYYY-MM-DD HH:mm:ss"),...o};return localStorage.setItem("todoList",JSON.stringify([...s,a])),a}static async updateTodo(t,o){const s=JSON.parse(localStorage.getItem("todoList")||"[]");localStorage.setItem("todoList",JSON.stringify(s.map(a=>a.id===t?{...a,...o}:a)))}static async batchDoneTodo(t){const o=JSON.parse(localStorage.getItem("todoList")||"[]");localStorage.setItem("todoList",JSON.stringify(o.map(s=>t.includes(s.id)?{...s,status:"done",doneAt:l().format("YYYY-MM-DD HH:mm:ss")}:s)))}static async restoreTodo(t){const o=JSON.parse(localStorage.getItem("todoList")||"[]");localStorage.setItem("todoList",JSON.stringify(o.map(s=>s.id===t?{...s,status:"todo",doneAt:void 0}:s)))}static async deleteTodo(t){const o=JSON.parse(localStorage.getItem("todoList")||"[]");localStorage.setItem("todoList",JSON.stringify(o.filter(s=>s.id!==t)))}static async abandonTodo(t){const o=JSON.parse(localStorage.getItem("todoList")||"[]");localStorage.setItem("todoList",JSON.stringify(o.map(s=>s.id===t?{...s,status:"abandoned",abandonedAt:l().format("YYYY-MM-DD HH:mm:ss")}:s)))}}export{h as T};
